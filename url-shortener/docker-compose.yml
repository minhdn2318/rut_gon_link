services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '5000:3000'
    env_file:
      - production.env
    environment:
      - NODE_ENV=production
    volumes:
      - ./production.env:/app/.env:ro
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - url-shortener-network
    restart: unless-stopped


  redis:
    image: redis:7
    ports:
      - '6379:6379'
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - url-shortener-network
    restart: unless-stopped

  
  configsvr1:
    image: mongo:6
    command: ["mongod", "--config", "/etc/mongo/configsvr.cfg"]
    volumes:
      - ./docker:/etc/mongo
      - configsvr1-data:/data/db
    ports:
      - 27019:27019
    networks: [url-shortener-network]

  configsvr2:
    image: mongo:6
    command: ["mongod", "--config", "/etc/mongo/configsvr.cfg"]
    volumes:
      - ./docker:/etc/mongo
      - configsvr2-data:/data/db
    networks: [url-shortener-network]

  configsvr3:
    image: mongo:6
    command: ["mongod", "--config", "/etc/mongo/configsvr.cfg"]
    volumes:
      - ./docker:/etc/mongo
      - configsvr3-data:/data/db
    networks: [url-shortener-network]

  shard1:
    image: mongo:6
    command: ["mongod", "--config", "/etc/mongo/shard1.cfg"]
    volumes:
      - ./docker:/etc/mongo
      - shard1-data:/data/db
    networks: [url-shortener-network]

  shard2:
    image: mongo:6
    command: ["mongod", "--config", "/etc/mongo/shard2.cfg"]
    volumes:
      - ./docker:/etc/mongo
      - shard2-data:/data/db
    networks: [url-shortener-network]

  mongos:
    image: mongo:6
    depends_on: [configsvr1, configsvr2, configsvr3, shard1, shard2]
    command: ["mongos", "--config", "/etc/mongo/mongos.cfg"]
    ports:
      - 27017:27017
    volumes:
      - ./docker:/etc/mongo
    networks: [url-shortener-network]


networks:
  url-shortener-network:
    driver: bridge

volumes:
  redis-data:
  configsvr1-data:
  configsvr2-data:
  configsvr3-data:
  shard1-data:
  shard2-data:
